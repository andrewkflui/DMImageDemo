/***************************************************************
 *
 * Interactive Demo: Digital Image Properties and Processing
 * Copyright (c) 2006 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.image;
import helper.gui.SplashScreenFrame;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

public class SimpleImageProcessor extends javax.swing.JFrame {

  private BufferedImage source = null;
  private BufferedImage target = null;

  /** Creates new form SimpleImageProcessor */
  public SimpleImageProcessor() {
        try {
            javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (Exception ex) {
        }
    try {
      initComponents();
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(null, ex.toString());
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    imageDisplayer1 = new faifai.image.ImageDisplayer();
    imageDisplayer2 = new faifai.image.ImageDisplayer();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenu5 = new javax.swing.JMenu();
    jMenuItem18 = new javax.swing.JMenuItem();
    jMenuItem19 = new javax.swing.JMenuItem();
    jMenuItem20 = new javax.swing.JMenuItem();
    jMenuItem21 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem7 = new javax.swing.JMenuItem();
    jMenuItem16 = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItem3 = new javax.swing.JMenuItem();
    jMenu4 = new javax.swing.JMenu();
    jMenuItem5 = new javax.swing.JMenuItem();
    jMenuItem6 = new javax.swing.JMenuItem();
    jMenuItem8 = new javax.swing.JMenuItem();
    jMenuItem14 = new javax.swing.JMenuItem();
    jMenuItem12 = new javax.swing.JMenuItem();
    jMenuItem13 = new javax.swing.JMenuItem();
    jMenuItem17 = new javax.swing.JMenuItem();
    jMenuItem9 = new javax.swing.JMenuItem();
    jMenuItem10 = new javax.swing.JMenuItem();
    jMenuItem11 = new javax.swing.JMenuItem();
    jMenuItem15 = new javax.swing.JMenuItem();
    jMenu3 = new javax.swing.JMenu();
    jMenuItem4 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Image Processing Interactive Demo");
    setBackground(new java.awt.Color(0, 0, 102));
    setMinimumSize(new java.awt.Dimension(480, 240));
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosed(evt);
      }
    });
    getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    imageDisplayer1.setBackground(new java.awt.Color(0, 51, 102));
    imageDisplayer1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Original", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    imageDisplayer1.setMinimumSize(new java.awt.Dimension(400, 320));
    imageDisplayer1.setPreferredSize(new java.awt.Dimension(400, 320));
    getContentPane().add(imageDisplayer1);

    imageDisplayer2.setBackground(new java.awt.Color(0, 51, 102));
    imageDisplayer2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Processed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    imageDisplayer2.setMinimumSize(new java.awt.Dimension(400, 320));
    imageDisplayer2.setPreferredSize(new java.awt.Dimension(400, 320));
    getContentPane().add(imageDisplayer2);

    jMenuBar1.setBackground(new java.awt.Color(102, 0, 102));

    jMenu1.setBackground(new java.awt.Color(102, 0, 102));
    jMenu1.setForeground(new java.awt.Color(255, 255, 255));
    jMenu1.setText("File");
    jMenu1.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem1.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem1.setText("Open");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileopenActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenu5.setText("Open Sample");
    jMenu5.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem18.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem18.setText("Butterfly");
    jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem18);

    jMenuItem19.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem19.setText("Grassland");
    jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem19);

    jMenuItem20.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem20.setText("NightCity");
    jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem20);

    jMenuItem21.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem21.setText("SoccerBall");
    jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem21);

    jMenu1.add(jMenu5);

    jMenuItem2.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem2.setText("Quit");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quitActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    jMenuItem7.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem7.setText("Revert");
    jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        revertActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem7);

    jMenuItem16.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem16.setText("Save");
    jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem16);

    jMenuBar1.add(jMenu1);

    jMenu2.setBackground(new java.awt.Color(102, 0, 102));
    jMenu2.setForeground(new java.awt.Color(255, 255, 255));
    jMenu2.setText("Image");
    jMenu2.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem3.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem3.setText("Information");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        imageInfoActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItem3);

    jMenuBar1.add(jMenu2);

    jMenu4.setBackground(new java.awt.Color(102, 0, 102));
    jMenu4.setForeground(new java.awt.Color(255, 255, 255));
    jMenu4.setText("Processing");
    jMenu4.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem5.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem5.setMnemonic('W');
    jMenuItem5.setText("Warm");
    jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        warmActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem5);

    jMenuItem6.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem6.setText("Chill");
    jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem6ActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem6);

    jMenuItem8.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem8.setText("Posterize");
    jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        posterizeActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem8);

    jMenuItem14.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    jMenuItem14.setText("Roughten");
    jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        roughtenActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem14);

    jMenuItem12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    jMenuItem12.setText("GrayScale");
    jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        grayscaleActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem12);

    jMenuItem13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    jMenuItem13.setText("Contrast");
    jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        contrastActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem13);

    jMenuItem17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    jMenuItem17.setText("Blur");
    jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem17ActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem17);

    jMenuItem9.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem9.setText("Scale");
    jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        scaleActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem9);

    jMenuItem10.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem10.setText("Flip");
    jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        flipActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem10);

    jMenuItem11.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem11.setText("Rotation");
    jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rotationActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem11);

    jMenuItem15.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem15.setText("Reveal Watermark");
    jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        revealWatermarkActionPerformed(evt);
      }
    });
    jMenu4.add(jMenuItem15);

    jMenuBar1.add(jMenu4);

    jMenu3.setBackground(new java.awt.Color(102, 0, 102));
    jMenu3.setForeground(new java.awt.Color(255, 255, 255));
    jMenu3.setText("About");
    jMenu3.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem4.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem4.setText("Simple Image Processor");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutActionPerformed(evt);
      }
    });
    jMenu3.add(jMenuItem4);

    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.blur(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_jMenuItem17ActionPerformed
  private JFileChooser savefileChooser = null;

  private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    File chosenImageFile;
    if (imageDisplayer2.getImage() == null) {
      JOptionPane.showMessageDialog(this, "No image to save", "Image Save Error", JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (savefileChooser == null) {
      savefileChooser = new JFileChooser();
      savefileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      if (fileChooser != null) {
        savefileChooser.setCurrentDirectory(fileChooser.getSelectedFile());
      } else {
        savefileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
      }
      savefileChooser.setDialogTitle("Save Image File");
      String wformats[] = ImageIO.getWriterFormatNames();
      for (int i = 0; i < wformats.length; i++) {
        savefileChooser.addChoosableFileFilter(new FileNameExtensionFilter(wformats[i].toUpperCase() + " Files", wformats[i]));
      }
    }
    int result = savefileChooser.showSaveDialog(null);
    if (result == JFileChooser.CANCEL_OPTION) {
      return;
    }
    chosenImageFile = savefileChooser.getSelectedFile();
    FileFilter selectedFileFilter = savefileChooser.getFileFilter();
    String type = selectedFileFilter.toString();
    String name = chosenImageFile.getName().toLowerCase();
    if (name.endsWith(type)) {
    } else {
      chosenImageFile = new File(chosenImageFile.getParent(), name + "." + type);
    }
    try {
      ImageIO.write(imageDisplayer2.getImage(), type, chosenImageFile);
      JOptionPane.showMessageDialog(this, "Image saved successful");
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Error in saving image file", "Save Error", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_saveActionPerformed

  private void revealWatermarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revealWatermarkActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperatorAdvanced.revealWatermark(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_revealWatermarkActionPerformed

  private void roughtenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roughtenActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.roughten(target, 5);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_roughtenActionPerformed
  private ContrastPanel contrastPanel = null;

  private void contrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastActionPerformed
    if (contrastPanel == null) {
      contrastPanel = new ContrastPanel();
    }
    contrastPanel.showDialog();
    if (target == null) {
      target = source;
    }
    target = ImageOperatorAdvanced.adjustContrast(target, contrastPanel.getBrightness(), contrastPanel.getContrast());
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_contrastActionPerformed

  private void grayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayscaleActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.grey(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_grayscaleActionPerformed

  private void rotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotationActionPerformed
    double angle = 0;
    String anglestr = JOptionPane.showInputDialog("Enter rotation (degrees)");
    try {
      angle = Double.parseDouble(anglestr);
      angle = angle * Math.PI / 180;
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Error: Invalid Input", "Input Error", JOptionPane.ERROR_MESSAGE);
      return;
    }
    if (target == null) {
      target = source;
    }
    //target = ImageOperatorAdvanced.rotateBackward(target, angle);
    target = ImageOperator.rotate(target, angle);
    //target = ImageOperatorAdvanced.rotate(target, angle);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_rotationActionPerformed

  private void flipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.flip(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_flipActionPerformed

  private void scaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleActionPerformed
    float scale = 1;
    String scalestr = JOptionPane.showInputDialog("Enter scale (> 0)");
    try {
      scale = Float.parseFloat(scalestr);
    } catch (Exception ex) {
    }
    if (target == null) {
      target = source;
    }
    target = ImageOperator.scale(target, scale, scale);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_scaleActionPerformed

  private void posterizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posterizeActionPerformed
    int level = 1;
    String levelstr = JOptionPane.showInputDialog("Enter posterization level (bits)");
    try {
      level = Integer.parseInt(levelstr);
      level = 8 - level;
      level = Math.min(8, level);
      level = Math.max(1, level);
    } catch (Exception ex) {
    }
    if (target == null) {
      target = source;
    }
    target = ImageOperator.posterize(target, level);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_posterizeActionPerformed

  private void revertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertActionPerformed
    target = null;
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_revertActionPerformed

  private void warmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.warm(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_warmActionPerformed

  private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
    //printInformation();
    SplashScreenFrame.showFrame("/SplashScreenImageProcessing.png");
  }//GEN-LAST:event_aboutActionPerformed

  private void printInformation() {
    StringBuffer sb = new StringBuffer();
    sb.append("<html>");
    sb.append("Simple Image Processor version 0.1<br>");
    sb.append("Authored by Dr. Andrew Lui");
    JOptionPane.showMessageDialog(this, sb.toString());
  }

  private void imageInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageInfoActionPerformed
    BufferedImage image = imageDisplayer1.getImage();
    if (image == null) {
      JOptionPane.showMessageDialog(null, "No image loaded");
      return;
    }
    StringBuffer sb = new StringBuffer();
    sb.append("<html>");
    sb.append("Image Size = " + image.getWidth() + " x " + image.getHeight() + "<br>");
    ColorModel cmodel = image.getColorModel();
    sb.append("Colour space = " + cmodel.getColorSpace() + "<br>");
    sb.append("Color components = " + cmodel.getNumColorComponents() + "<br>");
    sb.append("Number of bits per pixel = " + cmodel.getPixelSize() + "<br>");
    JOptionPane.showMessageDialog(this, sb.toString());
  }//GEN-LAST:event_imageInfoActionPerformed
  private JFileChooser fileChooser = null;

  private void fileopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileopenActionPerformed
    File chosenImageFile = null;
    if (fileChooser == null) {
      fileChooser = new JFileChooser();
      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      if (chosenImageFile != null) {
        fileChooser.setCurrentDirectory(chosenImageFile.getParentFile());
      } else {
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
      }
      fileChooser.setDialogTitle("Select an Image File");
    }
    int result = fileChooser.showOpenDialog(null);
    if (result == JFileChooser.CANCEL_OPTION) {
      return;
    }
    chosenImageFile = fileChooser.getSelectedFile();
    try {
      BufferedImage image = ImageIO.read(chosenImageFile);
      source = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
      Graphics2D g2d = source.createGraphics();
      g2d.drawImage(image, 0, 0, null);
      imageDisplayer1.setImage(source);
    target = null;
      imageDisplayer2.setImage(target);
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(this, ex, "Image Read Error", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_fileopenActionPerformed

  private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    closeApplication();
  }//GEN-LAST:event_formWindowClosed

  private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
    closeApplication();
  }//GEN-LAST:event_quitActionPerformed

  private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
    if (target == null) {
      target = source;
    }
    target = ImageOperator.chill(target);
    imageDisplayer2.setImage(target);
  }//GEN-LAST:event_jMenuItem6ActionPerformed

  private void sampleImageOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleImageOpenActionPerformed
    String label = ((JMenuItem) evt.getSource()).getText();
    label = "/sampleimages/" + label + ".jpg";
    InputStream istream = super.getClass().getResourceAsStream(label);
    try {
      BufferedImage image = ImageIO.read(istream);
      source = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
      Graphics2D g2d = source.createGraphics();
      g2d.drawImage(image, 0, 0, null);
      imageDisplayer1.setImage(source);
    target = null;
      imageDisplayer2.setImage(target);
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(this, ex, "Image Read Error", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_sampleImageOpenActionPerformed

  private void closeApplication() {
    int result = JOptionPane.showConfirmDialog(this, "Are you sure to quit?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.CANCEL_OPTION) {
      return; /* The Cancel button is pressed */
    }
    System.exit(0);
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {

    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new SimpleImageProcessor().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private faifai.image.ImageDisplayer imageDisplayer1;
  private faifai.image.ImageDisplayer imageDisplayer2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenu jMenu4;
  private javax.swing.JMenu jMenu5;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem10;
  private javax.swing.JMenuItem jMenuItem11;
  private javax.swing.JMenuItem jMenuItem12;
  private javax.swing.JMenuItem jMenuItem13;
  private javax.swing.JMenuItem jMenuItem14;
  private javax.swing.JMenuItem jMenuItem15;
  private javax.swing.JMenuItem jMenuItem16;
  private javax.swing.JMenuItem jMenuItem17;
  private javax.swing.JMenuItem jMenuItem18;
  private javax.swing.JMenuItem jMenuItem19;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem20;
  private javax.swing.JMenuItem jMenuItem21;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenuItem jMenuItem5;
  private javax.swing.JMenuItem jMenuItem6;
  private javax.swing.JMenuItem jMenuItem7;
  private javax.swing.JMenuItem jMenuItem8;
  private javax.swing.JMenuItem jMenuItem9;
  // End of variables declaration//GEN-END:variables
}

class FileNameExtensionFilter extends FileFilter {

  private String desc;
  private String suffix;

  FileNameExtensionFilter(String desc, String suffix) {
    this.desc = desc;
    this.suffix = suffix;
  }

  public boolean accept(File f) {
    String name = f.getName();
    if (name.toLowerCase().endsWith(suffix)) {
      return true;
    }
    if (f.isDirectory()) {
      return true;
    }
    return false;
  }

  public String getDescription() {
    return desc;
  }

  public String toString() {
    return suffix;
  }
}
