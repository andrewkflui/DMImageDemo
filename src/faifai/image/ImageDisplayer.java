/***************************************************************
 *
 * Interactive Demo: Digital Image Properties and Processing
 * Copyright (c) 2006 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

public class ImageDisplayer extends javax.swing.JPanel {

  private int imageWidth;
  private int imageHeight;
  private HistogramPanel hPanel = null;

  /** Creates new form ImageDisplayer */
  public ImageDisplayer() {
    initComponents();
  }

  public void hideInformation() {
    jButton1.setVisible(false);
    jLabel1.setVisible(false);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane1 = new javax.swing.JScrollPane();
    imageLabel1 = new faifai.image.ImageLabel();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

    imageLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        imageLabel1MousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        imageLabel1MouseReleased(evt);
      }
    });
    imageLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        imageLabel1MouseDragged(evt);
      }
    });

    javax.swing.GroupLayout imageLabel1Layout = new javax.swing.GroupLayout(imageLabel1);
    imageLabel1.setLayout(imageLabel1Layout);
    imageLabel1Layout.setHorizontalGroup(
      imageLabel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 398, Short.MAX_VALUE)
    );
    imageLabel1Layout.setVerticalGroup(
      imageLabel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 278, Short.MAX_VALUE)
    );

    jScrollPane1.setViewportView(imageLabel1);

    add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jPanel1.setBackground(new java.awt.Color(0, 0, 0));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel1.setBackground(new java.awt.Color(204, 255, 51));
    jLabel1.setFont(new java.awt.Font("Arial", 0, 9));
    jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    jLabel1.setOpaque(true);
    jLabel1.setPreferredSize(new java.awt.Dimension(100, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
    jPanel1.add(jLabel1, gridBagConstraints);

    jComboBox1.setBackground(new java.awt.Color(255, 153, 0));
    jComboBox1.setFont(new java.awt.Font("Arial", 1, 9)); // NOI18N
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-8 X", "-4 X", "-2 X", "1 X", "2 X", "4 X", "8 X" }));
    jComboBox1.setSelectedIndex(3);
    jComboBox1.setToolTipText("Scale");
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        scaleActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    jPanel1.add(jComboBox1, gridBagConstraints);

    jButton1.setBackground(new java.awt.Color(153, 0, 0));
    jButton1.setFont(new java.awt.Font("Arial", 0, 9));
    jButton1.setForeground(new java.awt.Color(255, 255, 255));
    jButton1.setText("Histo");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        histoActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    jPanel1.add(jButton1, gridBagConstraints);

    jButton2.setBackground(new java.awt.Color(153, 0, 0));
    jButton2.setFont(new java.awt.Font("Arial", 0, 9));
    jButton2.setForeground(new java.awt.Color(255, 255, 255));
    jButton2.setText("Home");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        centreActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    jPanel1.add(jButton2, gridBagConstraints);

    add(jPanel1, java.awt.BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private void histoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histoActionPerformed
    if (hPanel == null) {
      hPanel = new HistogramPanel();
    }
    hPanel.showDialog(imageLabel1.getImage());
  }//GEN-LAST:event_histoActionPerformed
  private boolean isMoving = false;
  private int offsetX = 0;
  private int offsetY = 0;
  private int movingStartX = 0;
  private int movingStartY = 0;

  private void imageLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabel1MouseDragged
    if (isMoving) {
      imageLabel1.setOffset(offsetX + evt.getX() - movingStartX, offsetY + evt.getY() - movingStartY);
      imageLabel1.repaint();
    } else {
      displayPixelInfo(evt.getX(), evt.getY());
    }
  }//GEN-LAST:event_imageLabel1MouseDragged

  private void imageLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabel1MousePressed
    int button = evt.getButton();
    if (button == 1) {
      displayPixelInfo(evt.getX(), evt.getY());
    } else if (button == 3) {
      isMoving = true;
      movingStartX = evt.getX();
      movingStartY = evt.getY();
    }
  }//GEN-LAST:event_imageLabel1MousePressed

  private void imageLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabel1MouseReleased
    int button = evt.getButton();
    if (button == 1) {
      jLabel1.setText("");
    } else if (button == 3) {
      offsetX += evt.getX() - movingStartX;
      offsetY += evt.getY() - movingStartY;
      isMoving = false;
    }
  }//GEN-LAST:event_imageLabel1MouseReleased

  public void setImage(BufferedImage image) {
    if (image != null) {
      imageWidth = image.getWidth();
      imageHeight = image.getHeight();
    }
    //jComboBox1.setSelectedIndex(3);
    imageLabel1.setImage(image);
    repaint();
  }

  public BufferedImage getImage() {
    return imageLabel1.getImage();
  }

  private void displayPixelInfo(int x, int y) {
    /* make sure the coordinate is within the boundary */
    Rectangle rect = this.getVisibleRect();
    if (x < 0 || y < 0 || x >= (int) rect.getWidth() || y >= (int) rect.getHeight()) {
      return;
    }
    x = x + (int) rect.getX();
    y = y + (int) rect.getY();
    float scale = imageLabel1.getScale();
    x = (int) (x / scale);
    y = (int) (y / scale);
    if (x >= imageWidth || y >= imageHeight) {
      return;
    }
    BufferedImage image = imageLabel1.getImage();
    int pixel = image.getRGB(x, y);
    int alpha = (pixel >> 24) & 0xff;
    int red = (pixel >> 16) & 0xff;
    int green = (pixel >> 8) & 0xff;
    int blue = (pixel) & 0xff;
    String message = "[" + x + "," + y + "] [" + red + "," + green + "," + blue + "]";
    jLabel1.setText(message);
  }

  private void scaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleActionPerformed
    String item = (String) jComboBox1.getSelectedItem();
    item = item.replaceAll("[X ]", "");
    int scalelevel = 1;
    try {
      scalelevel = Integer.parseInt(item);
    } catch (Exception ex) {
    }
    float scale = 1;
    if (scalelevel < 0) {
      scale = 1.0F / (-scalelevel);
    } else {
      scale = scalelevel;
    }
    imageLabel1.setScale(scale);
    jScrollPane1.setViewportView(imageLabel1);
  }//GEN-LAST:event_scaleActionPerformed

  private void centreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centreActionPerformed
    offsetX = offsetY = 0;
    imageLabel1.setOffset(offsetX, offsetY);
    imageLabel1.repaint();
  }//GEN-LAST:event_centreActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private faifai.image.ImageLabel imageLabel1;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables
}
