/***************************************************************
 *
 * Interactive Demo: Digital Image Properties and Processing
 * Copyright (c) 2006 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.image;

import helper.gui.SplashScreenFrame;
import helper.gui.TutorialFrame;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

public class JPEGFileQualityDemo extends javax.swing.JFrame {

  /** Creates new form RotationHoleDemo */
  public JPEGFileQualityDemo() {
        try {
            javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (Exception ex) {
        }
    initComponents();
        try {
      TutorialFrame tutorialFrame = new TutorialFrame();
      tutorialFrame.loadText("/faifai/tutorial/JPEGFileQualityDemo.htm");
      tutorialFrame.showFrame();
    } catch (Exception ex) {
    }
    imageDisplayer1.hideInformation();
    imageDisplayer2.hideInformation();
  }

  private void closeApplication() {
    int result = JOptionPane.showConfirmDialog(this, "Are you sure to quit?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.CANCEL_OPTION) {
      return; /* The Cancel button is pressed */
    }
    System.exit(0);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    imageDisplayer1 = new faifai.image.ImageDisplayer();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    jSlider1 = new javax.swing.JSlider();
    jButton1 = new javax.swing.JButton();
    jTextArea1 = new javax.swing.JTextArea();
    jTextArea2 = new javax.swing.JTextArea();
    jPanel3 = new javax.swing.JPanel();
    imageDisplayer2 = new faifai.image.ImageStreamDisplayer();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenu5 = new javax.swing.JMenu();
    jMenuItem18 = new javax.swing.JMenuItem();
    jMenuItem21 = new javax.swing.JMenuItem();
    jMenuItem19 = new javax.swing.JMenuItem();
    jMenuItem20 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem7 = new javax.swing.JMenuItem();
    jMenuItem16 = new javax.swing.JMenuItem();
    jMenu3 = new javax.swing.JMenu();
    jMenuItem4 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Image File Quality Demo");
    setBackground(new java.awt.Color(0, 0, 0));
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel1.setBackground(new java.awt.Color(0, 0, 0));
    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Original", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    jPanel1.setMinimumSize(new java.awt.Dimension(280, 280));
    jPanel1.setPreferredSize(new java.awt.Dimension(280, 280));
    jPanel1.setLayout(new java.awt.GridLayout(1, 0));
    jPanel1.add(imageDisplayer1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jPanel1, gridBagConstraints);

    jPanel2.setBackground(new java.awt.Color(0, 51, 102));
    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel2.setMinimumSize(new java.awt.Dimension(128, 128));
    jPanel2.setPreferredSize(new java.awt.Dimension(128, 128));
    jPanel2.setLayout(new java.awt.GridBagLayout());

    jLabel1.setForeground(new java.awt.Color(255, 255, 255));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("File Format");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel2.add(jLabel1, gridBagConstraints);

    jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 10));
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPEG" }));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel2.add(jComboBox1, gridBagConstraints);

    jLabel2.setForeground(new java.awt.Color(255, 255, 255));
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("Q Factor");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    jPanel2.add(jLabel2, gridBagConstraints);

    jSlider1.setFont(new java.awt.Font("Tahoma", 0, 8));
    jSlider1.setForeground(new java.awt.Color(0, 204, 255));
    jSlider1.setMajorTickSpacing(50);
    jSlider1.setMinorTickSpacing(10);
    jSlider1.setPaintLabels(true);
    jSlider1.setPaintTicks(true);
    jSlider1.setValue(100);
    jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSlider1StateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel2.add(jSlider1, gridBagConstraints);

    jButton1.setFont(new java.awt.Font("Tahoma", 0, 10));
    jButton1.setText("Compress Image");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    jPanel2.add(jButton1, gridBagConstraints);

    jTextArea1.setBackground(new java.awt.Color(204, 255, 51));
    jTextArea1.setColumns(20);
    jTextArea1.setEditable(false);
    jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 10));
    jTextArea1.setLineWrap(true);
    jTextArea1.setRows(3);
    jTextArea1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    jTextArea1.setMaximumSize(new java.awt.Dimension(120, 40));
    jTextArea1.setMinimumSize(new java.awt.Dimension(120, 40));
    jTextArea1.setPreferredSize(new java.awt.Dimension(120, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    jPanel2.add(jTextArea1, gridBagConstraints);

    jTextArea2.setBackground(new java.awt.Color(204, 255, 51));
    jTextArea2.setColumns(20);
    jTextArea2.setEditable(false);
    jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 10));
    jTextArea2.setLineWrap(true);
    jTextArea2.setRows(3);
    jTextArea2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    jTextArea2.setMaximumSize(new java.awt.Dimension(120, 40));
    jTextArea2.setMinimumSize(new java.awt.Dimension(120, 40));
    jTextArea2.setPreferredSize(new java.awt.Dimension(120, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    jPanel2.add(jTextArea2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jPanel2, gridBagConstraints);

    jPanel3.setBackground(new java.awt.Color(0, 0, 0));
    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Compressed Image", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    jPanel3.setMinimumSize(new java.awt.Dimension(280, 280));
    jPanel3.setPreferredSize(new java.awt.Dimension(280, 280));
    jPanel3.setLayout(new java.awt.GridLayout(1, 0));
    jPanel3.add(imageDisplayer2);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jPanel3, gridBagConstraints);

    jMenuBar1.setBackground(new java.awt.Color(102, 0, 102));

    jMenu1.setBackground(new java.awt.Color(102, 0, 102));
    jMenu1.setForeground(new java.awt.Color(255, 255, 255));
    jMenu1.setText("File");
    jMenu1.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem1.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem1.setText("Open");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1fileopenActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenu5.setText("Open Sample");
    jMenu5.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem18.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem18.setText("Butterfly");
    jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem18sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem18);

    jMenuItem21.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem21.setText("SoccerBall");
    jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem18sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem21);

    jMenuItem19.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem19.setText("GreenPattern256");
    jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem18sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem19);

    jMenuItem20.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem20.setText("YellowSquare");
    jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem18sampleImageOpenActionPerformed(evt);
      }
    });
    jMenu5.add(jMenuItem20);

    jMenu1.add(jMenu5);

    jMenuItem2.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem2.setText("Quit");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2quitActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    jMenuItem7.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem7.setText("Revert");
    jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem7revertActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem7);

    jMenuItem16.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem16.setText("Save");
    jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem16saveActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem16);

    jMenuBar1.add(jMenu1);

    jMenu3.setBackground(new java.awt.Color(102, 0, 102));
    jMenu3.setForeground(new java.awt.Color(255, 255, 255));
    jMenu3.setText("About");
    jMenu3.setFont(new java.awt.Font("Tahoma", 0, 10));

    jMenuItem4.setFont(new java.awt.Font("Tahoma", 0, 10));
    jMenuItem4.setText("Multimedia Learning Platform");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem4aboutActionPerformed(evt);
      }
    });
    jMenu3.add(jMenuItem4);

    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents
  private JFileChooser fileChooser;
  private JFileChooser savefileChooser;
  private BufferedImage source;
  private BufferedImage target;

    private void jMenuItem1fileopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1fileopenActionPerformed
      File chosenImageFile = null;
      if (fileChooser == null) {
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chosenImageFile != null) {
          fileChooser.setCurrentDirectory(chosenImageFile.getParentFile());
        } else {
          fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        }
        fileChooser.setDialogTitle("Select an Image File");
      }
      int result = fileChooser.showOpenDialog(null);
      if (result == JFileChooser.CANCEL_OPTION) {
        return;
      }
      chosenImageFile = fileChooser.getSelectedFile();
      try {
        long theFileLen = chosenImageFile.length();
        jTextArea1.setText("ORIGINAL FILESIZE:\r\n" + theFileLen + " BYTES");
        BufferedImage image = ImageIO.read(chosenImageFile);
        source = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = source.createGraphics();
        g2d.drawImage(image, 0, 0, null);
        imageDisplayer1.setImage(source);
      } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex, "Image Read Error", JOptionPane.ERROR_MESSAGE);
      }
}//GEN-LAST:event_jMenuItem1fileopenActionPerformed

    private void jMenuItem18sampleImageOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18sampleImageOpenActionPerformed
      String label = ((JMenuItem) evt.getSource()).getText();
      label = "/sampleimages/" + label + ".jpg";
      InputStream istream = super.getClass().getResourceAsStream(label);
      try {
        BufferedImage image = ImageIO.read(istream);
        source = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = source.createGraphics();
        g2d.drawImage(image, 0, 0, null);
        imageDisplayer1.setImage(source);
      } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex, "Image Read Error", JOptionPane.ERROR_MESSAGE);
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, ex, "Error " + ex, JOptionPane.ERROR_MESSAGE);
      }
}//GEN-LAST:event_jMenuItem18sampleImageOpenActionPerformed

    private void jMenuItem2quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2quitActionPerformed
      closeApplication();
}//GEN-LAST:event_jMenuItem2quitActionPerformed

    private void jMenuItem7revertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7revertActionPerformed
      target = null;
      imageDisplayer2.setImage(target);
}//GEN-LAST:event_jMenuItem7revertActionPerformed

    private void jMenuItem16saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16saveActionPerformed
      File chosenImageFile;
      if (imageDisplayer2.getImage() == null) {
        JOptionPane.showMessageDialog(this, "No image to save", "Image Save Error", JOptionPane.ERROR_MESSAGE);
        return;
      }
      if (savefileChooser == null) {
        savefileChooser = new JFileChooser();
        savefileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fileChooser != null) {
          savefileChooser.setCurrentDirectory(fileChooser.getSelectedFile());
        } else {
          savefileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        }
        savefileChooser.setDialogTitle("Save Image File");
        String wformats[] = ImageIO.getWriterFormatNames();
        for (int i = 0; i < wformats.length; i++) {
          savefileChooser.addChoosableFileFilter(new FileNameExtensionFilter(wformats[i].toUpperCase() + " Files", wformats[i]));
        }
      }
      int result = savefileChooser.showSaveDialog(null);
      if (result == JFileChooser.CANCEL_OPTION) {
        return;
      }
      chosenImageFile = savefileChooser.getSelectedFile();
      FileFilter selectedFileFilter = savefileChooser.getFileFilter();
      String type = selectedFileFilter.toString();
      String name = chosenImageFile.getName().toLowerCase();
      if (name.endsWith(type)) {
      } else {
        chosenImageFile = new File(chosenImageFile.getParent(), name + "." + type);
      }
      try {
        ImageIO.write(imageDisplayer2.getImage(), type, chosenImageFile);
        JOptionPane.showMessageDialog(this, "Image saved successful");
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error in saving image file", "Save Error", JOptionPane.ERROR_MESSAGE);
      }
}//GEN-LAST:event_jMenuItem16saveActionPerformed

    private void jMenuItem4aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4aboutActionPerformed
      //printInformation();
      SplashScreenFrame.showFrame("/SplashScreenImageProcessing.png");
}//GEN-LAST:event_jMenuItem4aboutActionPerformed

  private void updateProcessedImage() {
    if (source == null) {
      return;
    }
    String format = (String) jComboBox1.getSelectedItem();
    float qfactor = jSlider1.getValue();
    try {
      OutputStream ostream = imageDisplayer2.getOutputStream();
      Iterator writers = ImageIO.getImageWritersBySuffix(format);
      if (!writers.hasNext()) {
        throw new IllegalStateException("No writers for jpg?!");
      }
      ImageWriter writer = (ImageWriter) writers.next();
      ImageWriteParam imageWriteParam = writer.getDefaultWriteParam();
      imageWriteParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
      IIOImage iioImage = new IIOImage(imageDisplayer1.getImage(), null, null);
      imageWriteParam.setCompressionQuality(qfactor / 100F);
      ImageOutputStream out = ImageIO.createImageOutputStream(ostream);

      writer.setOutput(out);
      writer.write((IIOMetadata) null, iioImage, imageWriteParam);
      out.flush();
      long streamLen = out.length();
      out.close();
      ostream.close();

      jTextArea2.setText("COMPRESSED FILESIZE:\r\n" + streamLen + " BYTES");
    } catch (Exception ex) {
      ex.printStackTrace();
      JOptionPane.showMessageDialog(this, "Error in saving image file " + ex, "Save Error", JOptionPane.ERROR_MESSAGE);
    }
  }

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
    }//GEN-LAST:event_jSlider1StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      updateProcessedImage();
    }//GEN-LAST:event_jButton1ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new JPEGFileQualityDemo().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private faifai.image.ImageDisplayer imageDisplayer1;
  private faifai.image.ImageStreamDisplayer imageDisplayer2;
  private javax.swing.JButton jButton1;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenu jMenu5;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem16;
  private javax.swing.JMenuItem jMenuItem18;
  private javax.swing.JMenuItem jMenuItem19;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem20;
  private javax.swing.JMenuItem jMenuItem21;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenuItem jMenuItem7;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JSlider jSlider1;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextArea jTextArea2;
  // End of variables declaration//GEN-END:variables
}
